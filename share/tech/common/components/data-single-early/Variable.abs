(defines
	(VARstyle (assoc "VAR" style-options))
	(VARstyle (if VARstyle (cdr VARstyle) "conv"))
	(buffer-tree (lambda (inp out num_out_wires index)
		(let
			((nwo (eval num_out_wires))
			)
			(if (<= nwo 4)
				`(gates
					(connect ,inp (smash ,out))
				)
				(let 
					((level (inexact->exact (truncate (div (log (- nwo 1)) (log 4)))))
					 (bufdiv (expt 4 level))
					 (num_bufs (/ nwo bufdiv))
					 (num_rem (modulo nwo bufdiv))
					 (ind (eval index))
					 (ind1 (+ 1 (* 4 ind)))
					 (ind2 (+ 2 (* 4 ind)))
					 (ind3 (+ 3 (* 4 ind)))
					 (ind4 (+ 4 (* 4 ind)))
					)
					(if (= num_bufs 1)
						`(gates
							(cell "suggested-buffer" (slice ,ind1 1 (node "out_b")) ,inp )
							(macro buffer-tree (slice ,ind1 1 (node "out_b")) (slice 0 ,bufdiv ,out) ,bufdiv ,ind1)
							(if (> ,num_rem 0)
								(gates
									(cell "suggested-buffer" (slice ,ind2 1 (node "out_b")) ,inp)
								 	(macro buffer-tree (slice ,ind2 1 (node "out_b")) (slice ,bufdiv ,num_rem ,out) ,num_rem ,ind2)
								)
							)
						)
						(if (= num_bufs 2)
							`(gates
								(cell "suggested-buffer" (slice ,ind1 1 (node "out_b")) ,inp)
								(macro buffer-tree (slice ,ind1 1 (node "out_b")) (slice 0 ,bufdiv ,out) ,bufdiv ,ind1)
								(cell "suggested-buffer" (slice ,ind2 1 (node "out_b")) ,inp)
								(macro buffer-tree (slice ,ind2 1 (node "out_b")) (slice ,bufdiv ,bufdiv ,out) ,bufdiv ,ind2)
								(if (> ,num_rem 0)
									(gates
										(cell "suggested-buffer" (slice ,ind3 1 (node "out_b")) ,inp)
									 	(macro buffer-tree (slice ,ind3 1 (node "out_b")) (slice (* 2 ,bufdiv) ,num_rem ,out) ,num_rem ,ind3)
									)
								)
							)
							(if (= num_bufs 3)
								`(gates
									(cell "suggested-buffer" (slice ,ind1 1 (node "out_b")) ,inp)
									(macro buffer-tree (slice ,ind1 1 (node "out_b")) (slice 0 ,bufdiv ,out) ,bufdiv ,ind1)
									(cell "suggested-buffer" (slice ,ind2 1 (node "out_b")) ,inp)
									(macro buffer-tree (slice ,ind2 1 (node "out_b")) (slice ,bufdiv ,bufdiv ,out) ,bufdiv ,ind2)
									(cell "suggested-buffer" (slice ,ind3 1 (node "out_b")) ,inp)
									(macro buffer-tree (slice ,ind3 1 (node "out_b")) (slice (* 2 ,bufdiv) ,bufdiv ,out) ,bufdiv ,ind3)
									(if (> ,num_rem 0)
										(gates
											(cell "suggested-buffer" (slice ,ind4 1 (node "out_b")) ,inp)
											(macro buffer-tree (slice ,ind4 1 (node "out_b")) (slice (* 3 ,bufdiv) ,num_rem ,out) ,num_rem ,ind4)
										)
									)
								)
								(if (= num_bufs 4)
									`(gates
										(cell "suggested-buffer" (slice ,ind1 1 (node "out_b")) ,inp)
										(macro buffer-tree (slice ,ind1 1 (node "out_b")) (slice 0 ,bufdiv ,out) ,bufdiv ,ind1)
										(cell "suggested-buffer" (slice ,ind2 1 (node "out_b")) ,inp)
										(macro buffer-tree (slice ,ind2 1 (node "out_b")) (slice ,bufdiv ,bufdiv ,out) ,bufdiv ,ind2)
										(cell "suggested-buffer" (slice ,ind3 1 (node "out_b")) ,inp)
										(macro buffer-tree (slice ,ind3 1 (node "out_b")) (slice (* 2 ,bufdiv) ,bufdiv ,out) ,bufdiv ,ind3)
										(cell "suggested-buffer" (slice ,ind4 1 (node "out_b")) ,inp)
										(macro buffer-tree (slice ,ind4 1 (node "out_b")) (slice (* 3 ,bufdiv) ,bufdiv ,out) ,bufdiv ,ind4)
									)
								)
							)
						)
					)
				)
			)
		)
	))
	(inp-width (param "width"))
)
(nodes
	("latchEnable" 1 0 1)
;;	("lenBuffed" (param "width") 0 1)
	("lenEnable" 1 0 1)
	("lenBuffed" 1 0 1)
	("data" (param "width") 0 1)
	("ldata" (param "width") 0 1)
	("out_b" (param "width") 0 1)
	("nreq" 1 0 1)
)
(gates
;;	(macro buffer-tree
;;		(node "latchEnable")
;;		(node "lenBuffed")
;;		inp-width
;;		0
;;	)
	(case VARstyle
		(("excl")
			(nor
				(node "nreq")
				(smash (combine (req (each "read"))))
			)
			(and
				(node "lenEnable")
				(node "nreq")
				(node "latchEnable")
			)
			(cell "suggested-buffer" (node "lenBuffed") (node "lenEnable"))
			(s-element
				(req "write")
				(ack "write")
				(node "latchEnable")
				(slice 0 1 (node "lenBuffed"))
			)
		)
		(("fast")
			(cell "suggested-buffer" (node "lenBuffed") (node "latchEnable"))
			(cell "t-element"
				(req "write")
				(ack "write")
				(node "latchEnable")
				(slice 0 1 (node "lenBuffed"))
			)
		)
		(else
			(cell "suggested-buffer" (node "lenBuffed") (node "latchEnable"))
			(s-element
				(req "write")
				(ack "write")
				(node "latchEnable")
				(slice 0 1 (node "lenBuffed"))
			)
		)
	)
	
	(latch (combine (dup (param "width") (node "lenBuffed"))) (data "write") (node "ldata"))
	(if (and suggest-buffers (> (param "readPortCount") 2))
		(cell "suggested-buffer" (node "data") (node "ldata"))
		(connect (node "ldata") (node "data"))
	)
	(macro single-rail-connect-read-ports (param "width") (param "readPortCount") (param "specification") "data")
	
	;;;(connect (node "data") (data (each "read")))
)
(connections
	(connect (combine (req (each "read"))) (combine (ack (each "read"))))
)
