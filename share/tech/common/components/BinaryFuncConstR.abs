(primitive-part "BinaryFuncConstR"
	(parameters
		("outputWidth" (named-type "cardinal"))
		("inputAWidth" (named-type "cardinal"))
		("inputBWidth" (named-type "cardinal"))
		("op" (named-type "BinaryOperator"))
		("outputIsSigned" (named-type "boolean"))
		("inputAIsSigned" (named-type "boolean"))
		("inputBIsSigned" (named-type "boolean"))
		("inputBValue" (numeric-type #f (param "inputBWidth")))
	)
	(ports
		(port "out" passive output (numeric-type #f (param "outputWidth")))
		(port "inpA" active input (numeric-type #f (param "inputAWidth")))
	)
	(symbol
		(centre-string (case (param "op")
			(("Add") (string-append "a + " (number->string (param "inputBValue"))))
			(("Subtract") (string-append "a - " (number->string (param "inputBValue"))))
			(("ReverseSubtract") (string-append (number->string (param "inputBValue")) " - a"))
			(("Equals") (string-append "a = " (number->string (param "inputBValue"))))
			(("NotEquals") (string-append "a /= " (number->string (param "inputBValue"))))
			(("LessThan") (string-append "a < " (number->string (param "inputBValue"))))
			(("GreaterThan") (string-append "a > " (number->string (param "inputBValue"))))
			(("LessOrEquals") (string-append "a <= " (number->string (param "inputBValue"))))
			(("GreaterOrEquals") (string-append "a >= " (number->string (param "inputBValue"))))
			(("And") (string-append "a and " (number->string (param "inputBValue"))))
			(("Or") (string-append "a or " (number->string (param "inputBValue"))))
			(("Xor") (string-append "a xor " (number->string (param "inputBValue"))))
			(else (string-append (param "op") "k"))
		))
	)
	(implementation
		(style "four_b_rb" (include tech "common" "data-single-broad/BinaryFuncConstR"))
		(style "dual_b" (include tech "common" "data-dual/BinaryFuncConstR"))
		(style "one_of_2_4" (include tech "common" "data-1of4/BinaryFuncConstR"))
		(style "four_e_e" (include tech "common" "data-single-broad/BinaryFuncConstR"))
	)
)
