(defines
	(guard-count (param "guardCount"))
)
(nodes
	("bypass" (+ 1 guard-count) 0 1)
	("guardChoiceT" guard-count 0 1)
	("guardChoiceF" guard-count 0 1)
	("gInput1" 1 0 1)
	("gInput0" 1 0 1)
	("cdi" guard-count 0 1)
	("cd" 1 0 1)
	("guardReq" 1 0 1)
)
(gates
	; "Guard side"
	; need completion detection on guardInputs
	; when any guardInput is 1 ("activate" will be activated)
	(or
		(node "gInput1")
		(ack1 (each "guardInput"))
	)
	(c-element
		(ack1 "guard")
		(node "gInput1")
		(node "cd")
	)
	; when all guardInputs are 0 ("activate" will not be activated)
	(and
		(node "gInput0")
		(ack0 (each "guardInput"))
	)
	(c-element
		(ack0 "guard")
		(node "gInput0")
		(node "cd")
	)
	; use SRFFs to store guard state
	; (not needed if activate enclosed by guard)
	; NOTE: must detect completion of writes to SRFFs for DI operation
	(cell "dual-rail-latch"
		(combine (ack0 (each "guardInput")))
		(combine (ack1 (each "guardInput")))
		(node "cdi")
		(node "guardChoiceF")
		(node "guardChoiceT")
	)		
	(c-element
		(node "cd")
		(smash (node "cdi"))
	)
	; "Activate side"
	; steer activate-req to the proper activateOut-req
	(and
		(slice 1 guard-count (node "bypass"))
		(slice 0 guard-count (node "bypass"))
		(node "guardChoiceF")
	)
	(and
		(combine (req (each "activateOut")))
		(slice 0 guard-count (node "bypass"))
		(node "guardChoiceT")
	)
	; steer activateOut-ack to activate-ack
	(connect (req "activate") (slice 0 1 (node "bypass")))
	(or
		(ack "activate")
		(ack (each "activateOut"))
		(slice guard-count 1 (node "bypass"))
	)
	(if (and suggest-buffers (> guard-count 2))
		(cell "suggested-buffer" (node "guardReq") (req "guard"))
		(connect (req "guard") (node "guardReq"))
	)
	(connect (node "guardReq") (req (each "guardInput")))
)
(connections
)
