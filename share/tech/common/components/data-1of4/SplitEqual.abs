(defines
	(odd-outputs (= (modulo (param "outputCount") 2) 1))
	(output-odd (= (modulo (param "outputWidth") 2) 1))
	(even-max (* (quotient (param "outputCount") 2) 2))
	(bundle-size (quotient even-max 2))
	(end-start (quotient (* (param "outputWidth") even-max) 2))
	(out-width-even (quotient (param "outputWidth") 2))
	(out-width-odd (quotient (+ (param "outputWidth") 1) 2))
	(out-plural (> (param "outputWidth") 1))
	(plural-out (> (param "outputCount") 1))
	(create-list (lambda (width)
		(let 
			((curr-start (quotient (* (param "outputWidth") width) 2))
			(cross-start (+ curr-start out-width-even)))
			(list
				`(if out-plural ;; Connect even part of LS
					(gates
						(connect (slice ,curr-start out-width-even (req0 "inp")) (slice 0 out-width-even (req0 (bundle "out" ,width))))
						(connect (slice ,curr-start out-width-even (req1 "inp")) (slice 0 out-width-even (req1 (bundle "out" ,width))))
						(connect (slice ,curr-start out-width-even (req2 "inp")) (slice 0 out-width-even (req2 (bundle "out" ,width))))
						(connect (slice ,curr-start out-width-even (req3 "inp")) (slice 0 out-width-even (req3 (bundle "out" ,width))))
						(or (node (bundle "r0hb" ,(quotient width 2)))
							(slice ,(+ cross-start 1) out-width-even (req0 "inp"))
							(slice ,(+ cross-start 1) out-width-even (req2 "inp"))
						)
						(or (node (bundle "r1hb" ,(quotient width 2)))
							(slice ,(+ cross-start 1) out-width-even (req1 "inp"))
							(slice ,(+ cross-start 1) out-width-even (req3 "inp"))
						)
						(c-element (slice 0 out-width-even (req0 (bundle "out" ,(+ width 1))))
							 (slice 0 out-width-even (node (bundle "r0lb" ,(quotient width 2))))
							 (node (bundle "r0hb" ,(quotient width 2)))
						)
						(c-element (slice 0 out-width-even (req1 (bundle "out" ,(+ width 1))))
						 	(slice 0 out-width-even (node (bundle "r1lb" ,(quotient width 2))))
						 	(node (bundle "r0hb" ,(quotient width 2)))
						)
						(c-element (slice 0 out-width-even (req2 (bundle "out" ,(+ width 1))))
							(slice 0 out-width-even (node (bundle "r0lb" ,(quotient width 2))))
				 			(node (bundle "r1hb" ,(quotient width 2)))
						)
						(c-element (slice 0 out-width-even (req3 (bundle "out" ,(+ width 1))))
							(slice 0 out-width-even (node (bundle "r1lb" ,(quotient width 2))))
						 	(node (bundle "r1hb" ,(quotient width 2)))
						)
					)
				)
				`(or (slice out-width-even 1 (req0 (bundle "out" ,width))) ;; Get out top bit
					(slice ,cross-start 1 (req0 "inp"))
					(slice ,cross-start 1 (req2 "inp"))
				)
				`(or (slice out-width-even 1 (req1 (bundle "out" ,width))) 
					(slice ,cross-start  1 (req1 "inp"))
					(slice ,cross-start  1 (req3 "inp"))
				)
				;; Calculate Lower Bits of out2
				`(or (node (bundle "r0lb" ,(quotient width 2)))
					(slice ,cross-start out-width-odd (req0 "inp"))
					(slice ,cross-start out-width-odd (req1 "inp"))
				)
				`(or (node (bundle "r1lb" ,(quotient width 2)))
					(slice ,cross-start out-width-odd (req2 "inp"))
					(slice ,cross-start out-width-odd (req3 "inp"))
				)
				`(connect (slice out-width-even 1 (node (bundle "r0lb" ,(quotient width 2)))) (slice ,out-width-even 1 (req0 (bundle "out" ,(+ width 1)))))
				`(connect (slice out-width-even 1 (node (bundle "r1lb" ,(quotient width 2)))) (slice ,out-width-even 1 (req1 (bundle "out" ,(+ width 1)))))
			)
		)
	))
	(comb-eq (lambda ()
		(let
			((ce-tail (lambda (width res)
				(if (= width even-max)
					res
					(ce-tail (+ width 2) (append (create-list width) res))
				)
			)))
			(cons 'gates (ce-tail 0 `()))
		)
	))
)
(nodes
	("r0lb" out-width-odd 0 bundle-size)
	("r0hb" out-width-even 0 bundle-size) ;; Counter intuitive as odd LS-msb takes first low bit
	("r1lb" out-width-odd 0 bundle-size)
	("r1hb" out-width-even 0 bundle-size)
)
(gates
	(if output-odd
		(gates
			(if plural-out
				(macro comb-eq)
			)
			(if odd-outputs
				(gates
					(connect (slice end-start out-width-odd (req0 "inp")) (req0 (bundle "out" even-max)))
					(connect (slice end-start out-width-odd (req1 "inp")) (req1 (bundle "out" even-max)))
					(if out-plural
						(gates
							(connect (slice end-start out-width-even (req2 "inp")) (req2 (bundle "out" even-max)))
							(connect (slice end-start out-width-even (req3 "inp")) (req3 (bundle "out" even-max)))
						)
					)
				)
			)
		)
		(gates
			(connect (req0 "inp") (combine (req0 (each "out"))))
			(connect (req1 "inp") (combine (req1 (each "out"))))
			(connect (req2 "inp") (combine (req2 (each "out"))))
			(connect (req3 "inp") (combine (req3 (each "out"))))
		)
	)
	(c-element (ack "inp") (ack (each "out")))
)
(connections
)
